// Generated by CoffeeScript 2.7.0
var CalendarManager;

import DB from "@db";

import "../prototypes";

import calMapper from "../mappers/calMapper";

import {
  child,
  get,
  getDatabase,
  push,
  ref,
  remove,
  set,
  update
} from 'firebase/database';

import Manager from "./manager";

export default CalendarManager = {
  getUniqueArrayOfObjects: (arr, key) => {
    var i, len, obj, output, results;
    output = Object.entries(Object.assign({}, ...arr));
    results = [];
    for (i = 0, len = output.length; i < len; i++) {
      obj = output[i];
      results.push(obj[1]);
    }
    return results;
  },
  formatEventTitle: (title) => {
    if (title && title.length > 0) {
      title = title.replaceAll("To", "to").replaceAll("Vs", "vs").replaceAll("With", "with").replaceAll("At", "at");
      return title.uppercaseFirstLetterOfAllWords();
    }
  },
  hideCalendar: () => {
    var allCals;
    allCals = document.querySelectorAll(".flatpickr-calendar");
    if (allCals && allCals.length > 0) {
      return allCals.forEach((cal) => {
        return cal.remove();
      });
    }
  },
  addMultipleCalEvents: async function(newEvents) {
    var currentEvents, dbRef, error, event, eventsToAdd, i, j, len, len1, newEvent;
    dbRef = ref(getDatabase());
    currentEvents = (await DB.getTable(DB.tables.calendarEvents));
    if (!Array.isArray(currentEvents)) {
      currentEvents = [currentEvents];
    }
// Delete Existing
    for (i = 0, len = currentEvents.length; i < len; i++) {
      event = currentEvents[i];
      for (j = 0, len1 = newEvents.length; j < len1; j++) {
        newEvent = newEvents[j];
        if (event.fromDate === newEvent.fromDate && event.title === newEvent.title) {
          await DB.delete(DB.tables.calendarEvents, event.id);
        }
      }
    }
    eventsToAdd = [...currentEvents, ...newEvents].filter(function(x) {
      return x != null;
    }).flat();
    try {
      return (await set(child(dbRef, `${DB.tables.calendarEvents}`), eventsToAdd));
    } catch (error1) {
      error = error1;
    }
  },
  addCalendarEvent: async function(data) {
    var currentEvents, dbRef;
    dbRef = ref(getDatabase());
    currentEvents = (await DB.getTable(DB.tables.calendarEvents));
    if (!Array.isArray(currentEvents)) {
      currentEvents = [];
    }
    currentEvents = currentEvents.filter(function(n) {
      return n;
    });
    return set(child(dbRef, `${DB.tables.calendarEvents}`), [...currentEvents, data]);
  },
  deleteEvent: async function(tableName, id) {
    var dbRef, i, idToDelete, len, record, results, tableRecords;
    dbRef = ref(getDatabase());
    idToDelete = null;
    tableRecords = (await DB.getTable(tableName));
    if (Manager.isValid(tableRecords, true)) {
      if (!Array.isArray(tableRecords)) {
        tableRecords = DB.convertKeyObjectToArray(tableRecords);
      }
      results = [];
      for (i = 0, len = tableRecords.length; i < len; i++) {
        record = tableRecords[i];
        if ((record != null ? record.id : void 0) === id) {
          idToDelete = (await DB.getSnapshotKey(tableName, record, 'id'));
          results.push(remove(child(dbRef, `${tableName}/${idToDelete}/`)));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }
};

// Error handling can be added here if needed

//# sourceMappingURL=calendarManager.js.map
