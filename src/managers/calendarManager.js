// Generated by CoffeeScript 2.7.0
var CalendarManager;

import DB from "@db";

import "../prototypes";

import {
  child,
  getDatabase,
  ref,
  remove,
  set,
  update
} from 'firebase/database';

import Manager from "./manager";

import LogManager from "./logManager";

import StringManager from "./stringManager";

export default CalendarManager = {
  addMultipleCalEvents: async function(currentUser, newEvents) {
    var currentEvents, dbRef, error, toAdd;
    dbRef = ref(getDatabase());
    currentEvents = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser.phone}/`));
    toAdd = [...currentEvents, ...newEvents];
    try {
      return (await set(child(dbRef, `${DB.tables.calendarEvents}/${currentUser.phone}/`), toAdd));
    } catch (error1) {
      error = error1;
      return LogManager.log(error.message, LogManager.logTypes.error, error.stack);
    }
  },
  setHolidays: async function(holidays) {
    var currentEvents, dbRef, error, eventsToAdd;
    dbRef = ref(getDatabase());
    currentEvents = (await DB.getTable(DB.tables.holidayEvents));
    eventsToAdd = [...currentEvents, ...holidays].filter(function(x) {
      return x != null;
    }).flat();
    try {
      return (await set(child(dbRef, `${DB.tables.holidayEvents}`), eventsToAdd));
    } catch (error1) {
      error = error1;
      return LogManager.log(error.message, LogManager.logTypes.error, error.stack);
    }
  },
  addCalendarEvent: async function(currentUser, newEvent) {
    var currentEvents, dbRef, error, toAdd;
    dbRef = ref(getDatabase());
    currentEvents = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser.phone}/`));
    currentEvents = currentEvents.filter(function(n) {
      return n;
    });
    toAdd = [];
    try {
      if (Manager.isValid(currentEvents)) {
        toAdd = [...currentEvents, newEvent];
      } else {
        toAdd = [newEvent];
      }
      return set(child(dbRef, `${DB.tables.calendarEvents}/${currentUser.phone}/`), toAdd);
    } catch (error1) {
      error = error1;
      return LogManager.log(error.message, LogManager.logTypes.error, error.stack);
    }
  },
  updateEvent: async function(userPhone, prop, value, id) {
    var dbRef, error, i, key, len, record, recordToUpdate, tableRecords;
    dbRef = getDatabase();
    key = null;
    recordToUpdate;
    tableRecords = (await DB.getTable(`${DB.tables.calendarEvents}/${userPhone}/`));
    for (i = 0, len = tableRecords.length; i < len; i++) {
      record = tableRecords[i];
      if ((record != null ? record.id : void 0) === id) {
        key = (await DB.getSnapshotKey(`${DB.tables.calendarEvents}/${userPhone}/`, record, 'id'));
        record[prop] = value;
        recordToUpdate = record;
      }
    }
    try {
      return update(ref(dbRef, `${DB.tables.calendarEvents}/${userPhone}/${key}`), recordToUpdate);
    } catch (error1) {
      error = error1;
      return LogManager.log(error.message, LogManager.logTypes.error, error.stack);
    }
  },
  deleteMultipleEvents: async function(events, currentUser) {
    var dbRef, i, idToDelete, len, record, results, tableRecords;
    dbRef = ref(getDatabase());
    tableRecords = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser.phone}/`));
    results = [];
    for (i = 0, len = tableRecords.length; i < len; i++) {
      record = tableRecords[i];
      idToDelete = (await DB.getSnapshotKey(`${DB.tables.calendarEvents}/${currentUser.phone}/`, record, 'id'));
      results.push((await remove(child(dbRef, `${DB.tables.calendarEvents}/${currentUser.phone}/${idToDelete}`))));
    }
    return results;
  },
  deleteAllHolidayEvents: async function() {
    var dbRef, i, idToDelete, len, record, results, tableRecords;
    dbRef = ref(getDatabase());
    tableRecords = (await DB.getTable(`${DB.tables.holidayEvents}`));
    results = [];
    for (i = 0, len = tableRecords.length; i < len; i++) {
      record = tableRecords[i];
      idToDelete = (await DB.getSnapshotKey(`${DB.tables.holidayEvents}`, record, 'id'));
      results.push((await remove(child(dbRef, `${DB.tables.holidayEvents}/${idToDelete}`))));
    }
    return results;
  },
  deleteEvent: async function(currentUser, id) {
    var dbRef, error, i, idToDelete, len, record, results, tableRecords;
    dbRef = ref(getDatabase());
    idToDelete = null;
    tableRecords = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser.phone}/`));
    results = [];
    for (i = 0, len = tableRecords.length; i < len; i++) {
      record = tableRecords[i];
      if ((record != null ? record.id : void 0) === id) {
        idToDelete = (await DB.getSnapshotKey(`${DB.tables.calendarEvents}/${currentUser.phone}/`, record, 'id'));
        try {
          results.push(remove(child(dbRef, `${DB.tables.calendarEvents}/${currentUser.phone}/${idToDelete}`)));
        } catch (error1) {
          error = error1;
          results.push(LogManager.log(error.message, LogManager.logTypes.error, error.stack));
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

//# sourceMappingURL=calendarManager.js.map
