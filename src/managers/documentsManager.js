// Generated by CoffeeScript 2.7.0
var DocumentsManager;

import Manager from "./manager";

import DB from "../database/DB";

import DateManager from "./dateManager";

import moment from "moment";

import {
  child,
  get,
  getDatabase,
  push,
  ref,
  remove,
  set,
  update
} from 'firebase/database';

import FirebaseStorage from "../database/firebaseStorage";

export default DocumentsManager = {
  deleteDocsWithIds: async function(toDelete, currentUser, callback) {
    var dbDocs, docId, docs, i, len, results, thisDoc;
    results = [];
    for (i = 0, len = toDelete.length; i < len; i++) {
      docId = toDelete[i];
      docs = (await DB.getTable(DB.tables.documents));
      docs = Manager.convertToArray(docs).flat();
      dbDocs = Manager.convertToArray(docs);
      if (Manager.isValid(dbDocs, true)) {
        results.push((await (async function() {
          var j, len1, results1;
          results1 = [];
          for (j = 0, len1 = dbDocs.length; j < len1; j++) {
            thisDoc = dbDocs[j];
            if (!(thisDoc.id === docId)) {
              continue;
            }
            await DB.delete(DB.tables.documents, docId);
            await FirebaseStorage.delete(FirebaseStorage.directories.documents, currentUser.id, thisDoc.name);
            if (callback) {
              results1.push(callback(docId));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })()));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  getAllDocs: async function(currentUser) {
    var allDocs;
    allDocs = (await DB.getAllFilteredRecords(DB.tables.documents, currentUser, 'documents', 'root'));
    allDocs = Manager.convertToArray(allDocs);
    return allDocs;
  },
  addDocumentToDocumentsTable: async function(data) {
    var dbRef, tableData;
    dbRef = ref(getDatabase());
    tableData = (await DB.getTable(DB.tables.documents));
    tableData = Manager.convertToArray(tableData);
    if (Manager.isValid(tableData)) {
      if (tableData.length > 0) {
        tableData = [...tableData, data].filter(function(item) {
          return item;
        });
      } else {
        tableData = [data];
      }
    } else {
      tableData = [data];
    }
    return (await set(child(dbRef, DB.tables.documents), tableData));
  }
};

//# sourceMappingURL=documentsManager.js.map
