// Generated by CoffeeScript 2.7.0
var DocumentsManager;

import Manager from "./manager";

import DB from "../database/DB";

import {
  child,
  getDatabase,
  ref,
  set
} from 'firebase/database';

import FirebaseStorage from "../database/firebaseStorage";

import DatasetManager from "./datasetManager";

import StringManager from "./stringManager";

export default DocumentsManager = {
  deleteDocsWithIds: async function(idsToDelete, currentUser, callback = () => {
      return {};
    }) {
    var docId, docs, i, len, results, thisDoc;
    results = [];
    for (i = 0, len = idsToDelete.length; i < len; i++) {
      docId = idsToDelete[i];
      docs = DatasetManager.getValidArray((await DB.getTable(`${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`)));
      if (Manager.isValid(docs)) {
        results.push((await (async function() {
          var j, len1, results1;
          results1 = [];
          for (j = 0, len1 = docs.length; j < len1; j++) {
            thisDoc = docs[j];
            if (thisDoc.id === docId) {
              await DB.deleteById(`${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`, docId);
              thisDoc.name = StringManager.formatFileName(thisDoc.name);
              await FirebaseStorage.deleteFile(`${FirebaseStorage.directories.documents}/${currentUser.id}/${thisDoc.name}`);
              if (callback) {
                results1.push(callback(docId));
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })()));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  addToDocumentsTable: async function(currentUser, data) {
    var dbRef, tableData;
    dbRef = ref(getDatabase());
    tableData = (await DB.getTable(`${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`));
    if (Manager.isValid(tableData)) {
      if (tableData.length > 0) {
        tableData = [...tableData, data].filter(function(item) {
          return item;
        });
      } else {
        tableData = [data];
      }
    } else {
      tableData = [data];
    }
    return (await set(child(dbRef, `${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`), tableData));
  }
};

//# sourceMappingURL=documentsManager.js.map
