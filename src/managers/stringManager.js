// Generated by CoffeeScript 2.7.0
var StringManager;

import lzstring from "lz-string";

StringManager = {
  getReadablePhoneNumber: function(phoneNumber) {
    var cleaned, formattedPhone, match;
    formattedPhone = phoneNumber;
    cleaned = ('' + phoneNumber).replace(/\D/g, '');
    // Format the number with dashes
    match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
    if (match) {
      return `${match[1]}-${match[2]}-${match[3]}`;
    }
    return formattedPhone;
  },
  getFirstNameOnly: function(name) {
    var returnString;
    if (!name) {
      return name;
    }
    returnString = name.toString();
    if (!returnString || returnString.length === 0) {
      return returnString;
    }
    returnString = returnString.split(' ')[0];
    return StringManager.uppercaseFirstLetterOfAllWords(returnString);
  },
  isAllUppercase: function(input) {
    return input === input.toUpperCase();
  },
  formatPhone: function(input) {
    input = input.toString().replace(/-/g, '').replace(/\s+/g, '').replace(/\(/g, '').replace(/\)/g, '').replace(/\+/g, '').replace(/\+1/g, '');
    return input;
  },
  compressString: function(string) {
    var compressed;
    // Import the lz-string library dependency
    compressed = lzstring.compress(string);
    console.log('Original:', string.length, 'bytes');
    console.log('Compressed:', compressed.length, 'bytes');
    return compressed;
  },
  deCompressString: function(string) {
    var decompressed;
    // Import the lz-string library dependency
    console.log(string);
    decompressed = lzstring.decompress(string);
    console.log(decompressed);
    return decompressed;
  },
  formatFileName: function(fileName) {
    return fileName.replaceAll(' ', '-').replaceAll('(', '').replaceAll(')', '');
  },
  spaceBetweenWords: function(input) {
    return input.toString().replace(/([a-z])([A-Z])/g, '$1 $2');
  },
  addLongTextClass: function(text) {
    if (StringManager.wordCount(text) > 10) {
      return "long-text";
    } else {
      return '';
    }
  },
  getFileExtension: function(fileName) {
    return fileName.split('.').pop();
  },
  lowercaseShouldBeLowercase: function(input) {
    return input.replace('Of', 'of');
  },
  removeFileExtension: function(input) {
    return input.replace(/\.[^\/.]+$/, '');
  },
  wordCount: function(input) {
    var ref, ref1;
    return input != null ? (ref = input.trim()) != null ? (ref1 = ref.split(/\s+/)) != null ? ref1.length : void 0 : void 0 : void 0;
  },
  stringHasNumbers: function(input) {
    return /\d/.test(input);
  },
  capitalizeFirstWord: function(str) {
    var capitalizedFirstWord, firstWord;
    firstWord = str.split(' ')[0];
    capitalizedFirstWord = firstWord.charAt(0).toUpperCase() + firstWord.slice(1);
    return capitalizedFirstWord + str.slice(firstWord.length);
  },
  toCamelCase: function(str) {
    str = str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
      if (index === 0) {
        return word.toLowerCase();
      } else {
        return word.toUpperCase();
      }
    });
    str = str.replace(/\s+/g, '').replaceAll(" ", "");
    return str;
  },
  formatDbProp: function(prop) {
    prop = StringManager.toCamelCase(prop).replaceAll(' ', '');
    return prop;
  },
  addSpaceBetweenWords: function(str) {
    str = str.replace(/([a-z])([A-Z])/, '$1 $2');
    return str;
  },
  getFirstWord: function(input) {
    return input.toString().replace(/ .*/, '');
  },
  uppercaseFirstLetterOfAllWords: function(input) {
    var words;
    words = input != null ? input.toString() : void 0;
    if (words && words !== void 0) {
      if ((words != null ? words.indexOf('-') : void 0) > -1) {
        words = input.replace(/-/g, ' ').split(' ');
      } else {
        words = words != null ? words.split(' ') : void 0;
      }
      words = words != null ? words.filter(function(x) {
        return x.length > 0;
      }) : void 0;
      words = words != null ? words.map(function(word) {
        return word[0].toUpperCase() + word.substr(1);
      }) : void 0;
      if ((words != null ? words.length : void 0) > 0) {
        words = words != null ? words.join(' ') : void 0;
      }
    }
    return words;
  },
  formatEventTitle: function(title) {
    if (title && title.length > 0) {
      title = StringManager.uppercaseFirstLetterOfAllWords(title);
      title = StringManager.formatTitleWords(title);
      return title;
    }
  },
  formatTitleWords: function(title) {
    return title = title.replaceAll("To", "to").replaceAll("Vs", "vs").replaceAll("With", "with").replaceAll("At", "at").replaceAll("From", "from").replaceAll("The", "the").replaceAll("And", "and").replaceAll("Is", "is").replaceAll("Not", "not");
  }
};

export default StringManager;

//# sourceMappingURL=stringManager.js.map
