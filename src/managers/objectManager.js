// Generated by CoffeeScript 2.7.0
var ObjectManager;

import ModelNames from "../models/modelNames";

import CalendarEvent from "../models/calendarEvent";

import Expense from "../models/expense";

import Memory from "../models/memory";

import TransferChangeRequest from "../models/transferChangeRequest";

import SwapRequest from "../models/swapRequest";

import TitleSuggestion from "../models/titleSuggestion";

import User from "../models/user";

import Coparent from "../models/coparent";

import ConversationThread from "../models/conversationThread";

import ConversationMessage from "../models/conversationMessage";

import ChildUser from "../models/child/childUser";

ObjectManager = {
  cleanObject: function(object, modelName) {
    var prop, ref, ref1, returnObject;
    returnObject = (function() {
      switch (modelName) {
        case ModelNames.calendarEvent:
          return new CalendarEvent();
        case ModelNames.expense:
          return new Expense();
        case ModelNames.memory:
          return new Memory();
        case ModelNames.transferChangeRequest:
          return new TransferChangeRequest();
        case ModelNames.swapRequest:
          return new SwapRequest();
        case ModelNames.titleSuggestion:
          return new TitleSuggestion();
        case ModelNames.user:
          return new User();
        case ModelNames.coparent:
          return new Coparent();
        case ModelNames.conversationThread:
          return new ConversationThread();
        case ModelNames.conversationMessage:
          return new ConversationMessage();
        case ModelNames.childUser:
          return new ChildUser();
      }
    })();
    for (prop in object) {
      if (Array.isArray(object[prop])) {
        if ((ref = object[prop]) === (void 0) || ref === null) {
          object[prop] = [];
        }
      } else {
        if (((ref1 = object[prop]) === (void 0) || ref1 === null) || object[prop].toString().toLowerCase().includes('invalid')) {
          object[prop] = '';
        }
      }
      returnObject[prop] = object[prop];
    }
    return returnObject;
  },
  merge: function(objectWithValuesToKeep, objectWithValuesToAdd) {
    return _.assign(objectWithValuesToKeep, objectWithValuesToAdd);
  }
};

export default ObjectManager;

//# sourceMappingURL=objectManager.js.map
