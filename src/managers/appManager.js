// Generated by CoffeeScript 2.7.0
var AppManager;

import Manager from "./manager";

import DB from "../database/DB";

import moment from "moment";

import {
  child,
  getDatabase,
  ref,
  set
} from 'firebase/database';

import DateFormats from "../constants/dateFormats";

import DB_UserScoped from "../database/db_userScoped";

import CalendarManager from "./calendarManager";

import FirebaseStorage from "../database/firebaseStorage";

export default AppManager = {
  getQueryStringParams: function(queryStringName) {
    var searchParams;
    searchParams = new URLSearchParams(window.location.search);
    if (Manager.isValid(queryStringName, true)) {
      return searchParams.get(queryStringName);
    }
    return searchParams;
  },
  setAppBadge: (count) => {
    if (window.navigator.setAppBadge) {
      return window.navigator.setAppBadge(count);
    }
  },
  clearAppBadge: () => {
    if (window.navigator.clearAppBadge) {
      return navigator.clearAppBadge();
    }
  },
  isDevMode: () => {
    return location.hostname === 'localhost';
  },
  getAccountType: (currentUser) => {
    if (Manager.isValid(currentUser)) {
      if (Manager.isValid(currentUser.accountType)) {
        if (currentUser.accountType === 'parent') {
          return 'parent';
        } else {
          return 'child';
        }
      }
      return 'parent';
    }
  },
  deleteExpiredCalendarEvents: async function(currentUser) {
    var daysPassed, event, events, i, len, results;
    events = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser != null ? currentUser.key : void 0}`));
    if (Manager.isValid(events)) {
      events = events.filter(function(x) {
        return x != null;
      });
      events = events.flat();
      results = [];
      for (i = 0, len = events.length; i < len; i++) {
        event = events[i];
        daysPassed = moment().diff(event.startDate, 'days');
        if (daysPassed >= 30 || moment(event.startDate).year() !== moment().year()) {
          results.push((await CalendarManager.deleteEvent(currentUser, event.id)));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  },
  setUpdateAvailable: async function(updateAvailableValue = null) {
    var dbRef, i, lastUpdateObject, len, timestamp, updateAvailable, updateObject, user, users;
    dbRef = ref(getDatabase());
    users = Manager.convertToArray((await DB.getTable(DB.tables.users)));
// Set updatedAp to false for all users to show update alert
    for (i = 0, len = users.length; i < len; i++) {
      user = users[i];
      await DB_UserScoped.updateUserRecord(user.phone, "updatedApp", false);
    }
    lastUpdateObject = (await DB.getTable("updateAvailable"));
    ({updateAvailable} = lastUpdateObject);
    timestamp = moment().format(DateFormats.fullDatetime);
    updateObject = {
      lastUpdate: timestamp,
      updateAvailable: false
    };
    if (updateAvailableValue !== null && updateAvailableValue !== void 0) {
      updateObject.lastUpdate = timestamp;
      updateAvailable = false;
      set(child(dbRef, "updateAvailable"), updateObject);
      return false;
    }
    if (!Manager.isValid(updateAvailable) || updateAvailable === false) {
      updateObject.updateAvailable = true;
      return set(child(dbRef, "updateAvailable"), updateObject);
    }
  },
  getLastUpdateObject: async function() {
    var updateObject;
    updateObject = (await DB.getTable("updateAvailable"));
    return updateObject;
  },
  deleteExpiredMemories: async function(currentUser) {
    var daysPassed, i, len, memories, memory, results;
    memories = (await DB.getTable(DB.tables.memories));
    if (Manager.isValid(memories)) {
      results = [];
      for (i = 0, len = memories.length; i < len; i++) {
        memory = memories[i];
        daysPassed = moment().diff(event.creationDate, 'days');
        if (daysPassed >= 30) {
          await DB.delete(`${DB.tables.memories}/${currentUser != null ? currentUser.key : void 0}`, memory.id);
          if (Manager.isValid(memory != null ? memory.memoryName : void 0)) {
            results.push((await FirebaseStorage.delete(FirebaseStorage.directories.memories, currentUser != null ? currentUser.key : void 0, memory != null ? memory.memoryName : void 0)));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }
};

//# sourceMappingURL=appManager.js.map
