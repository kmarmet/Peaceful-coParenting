// Generated by CoffeeScript 2.7.0
var NotificationManager;

import DB from '../../src/database/DB';

import OneSignal from 'react-onesignal';

import Manager from "./manager.js";

import NotificationSubscriber from "../models/notificationSubscriber";

import Activity from "../models/activity";

import DB_UserScoped from "../database/db_userScoped.js";

export default NotificationManager = {
  currentUser: null,
  lineBreak: '\r\n',
  // Define message templates
  templates: {
    // Template for event tomorrow reminder
    eventIsTomorrowReminder: function(event) {
      return `${event.title} is tomorrow ${Manager.isValid(event.fromTime) ? '@ ' + event.fromTime : ''}`;
    },
    // Template for event in an hour reminder
    eventIsInAnHourReminder: function(event) {
      return `${event.title} is in 1 hour`;
    },
    // Template for event in half hour reminder
    eventIsInHalfHourReminder: function(event) {
      return `${event.title} is in 30 minutes`;
    },
    // Template for update reminder
    updateReminder: function() {
      return 'Visit New Updates in the menu to learn more';
    },
    // Template for swap request decision
    swapRequestApproval: function(request, recipientName) {
      return `Swap Request for ${request.startDate} has been APPROVED by ${recipientName}${NotificationManager.lineBreak}${NotificationManager.lineBreak}`;
    },
    swapRequestRejection: function(request, recipientName) {
      return `Swap Request for ${request.startDate} has been REJECTED.${NotificationManager.lineBreak}${NotificationManager.lineBreak} Reason: ${request.reason}. If you would still prefer to proceed with the request, you can communicate with ${recipientName} to come to an agreement on the request.`;
    },
    transferRequestApproval: function(request, recipientName) {
      return `Transfer Change Request for ${request.date} has been APPROVED by ${recipientName}${NotificationManager.lineBreak}${NotificationManager.lineBreak}`;
    },
    transferRequestRejection: function(request, recipientName) {
      return `Transfer Change Request for ${request.date} has been REJECTED.${NotificationManager.lineBreak}${NotificationManager.lineBreak} Reason: ${request.reason}. If you would still prefer to proceed with the request, you can communicate with ${recipientName} to come to an agreement on the request.`;
    }
  },
  //  PRODUCTION
  apiKey: 'os_v2_app_wjb2emrqojh2re4vwfdvavgfgfpm3s3xxaduhlnuiah2weksujvxpesz4fnbclq7b2dch2k3ixixovlaroxcredbec4ghwac4qpcjbi',
  appId: 'b243a232-3072-4fa8-9395-b1475054c531',
  // LOCALHOST
  //  apiKey: 'os_v2_app_j6desntrnffrplh255adzo5p5dy5bymf5qrexxmauni7ady7m6v5kxspx55zktplqa6un2jfyc6az5yvhaxfkgbtpfjf3siqd2th3ty'
  //  appId: '4f864936-7169-4b17-acfa-ef403cbbafe8'
  init: function(currentUser) {
    NotificationManager.currentUser = currentUser;
    window.OneSignalDeferred = window.OneSignalDeferred || [];
    return OneSignalDeferred.push(function() {
      return OneSignal.init({
        appId: NotificationManager.appId
      }).then(function() {
        return OneSignal.User.PushSubscription.addEventListener('change', NotificationManager.eventListener);
      });
    });
  },
  eventListener: function(event) {
    var newSubscriber, ref, subId, userSubscribed;
    userSubscribed = OneSignal.User.PushSubscription.optedIn;
    subId = event != null ? (ref = event.current) != null ? ref.id : void 0 : void 0;
    console.log(subId);
    if (userSubscribed && subId) {
      newSubscriber = new NotificationSubscriber();
      return setTimeout(function() {
        var ref1, ref2, ref3;
        console.log(NotificationManager != null ? NotificationManager.currentUser : void 0);
        newSubscriber.email = NotificationManager != null ? (ref1 = NotificationManager.currentUser) != null ? ref1.email : void 0 : void 0;
        newSubscriber.phone = NotificationManager != null ? (ref2 = NotificationManager.currentUser) != null ? ref2.phone : void 0 : void 0;
        newSubscriber.key = NotificationManager != null ? (ref3 = NotificationManager.currentUser) != null ? ref3.key : void 0 : void 0;
        newSubscriber.id = Manager.getUid();
        newSubscriber.subscriptionId = subId;
        return fetch(`https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}/user/identity`).then(async function(identity) {
          var deleteKey, existingSubscriber, ref4, ref5, userIdentity;
          userIdentity = (await identity.json());
          newSubscriber.oneSignalId = userIdentity != null ? (ref4 = userIdentity.identity) != null ? ref4.onesignal_id : void 0 : void 0;
          existingSubscriber = (await DB.find(DB.tables.notificationSubscribers, ["phone", NotificationManager != null ? (ref5 = NotificationManager.currentUser) != null ? ref5.phone : void 0 : void 0], true));
          // If user already exists -> replace record
          if (Manager.isValid(existingSubscriber)) {
            deleteKey = (await DB.getSnapshotKey(`${DB.tables.notificationSubscribers}`, existingSubscriber, "id"));
            await DB.deleteByPath(`${DB.tables.notificationSubscribers}/${deleteKey}`);
          }
          return (await DB.add(`/${DB.tables.notificationSubscribers}`, newSubscriber));
        }).catch(function(error) {
          return console.error(error);
        });
      }, 500);
    }
  },
  getUserSubId: async function(currentUserPhoneOrEmail, phoneOrEmail = "email") {
    var existingRecord;
    existingRecord = (await DB.find(DB.tables.notificationSubscribers, [phoneOrEmail, currentUserPhoneOrEmail], true));
    return existingRecord != null ? existingRecord.subscriptionId : void 0;
  },
  deleteUser: function(oneSignalId, subId) {
    fetch(`https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}`, {
      method: 'DELETE',
      headers: {
        'accept': 'application/json'
      }
    });
    return fetch(`https://api.onesignal.com/apps/${NotificationManager.appId}/users/by/onesignal_id/${oneSignalId}`, {
      method: 'DELETE'
    });
  },
  viewUser: function(subId) {
    var userIdentity;
    userIdentity = '';
    fetch(`https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}/user/identity`).then(async function(identity) {
      return userIdentity = (await identity.json());
    }).then(function(result) {}).catch(function(error) {
      return console.error(error);
    });
    return userIdentity;
  },
  sendNotification: async function(title, message, recipientKey, currentUser = null, category = '') {
    var allSubs, myHeaders, newActivity, raw, requestOptions, subId, subIdRecord;
    myHeaders = new Headers();
    myHeaders.append("Accept", "application/json");
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Authorization", `Basic ${NotificationManager.apiKey}`);
    allSubs = (await DB.getTable(`${DB.tables.notificationSubscribers}`));
    subIdRecord = allSubs.find(function(sub) {
      return sub.key === recipientKey;
    });
    if (!subIdRecord) {
      return false;
    }
    subId = subIdRecord != null ? subIdRecord.subscriptionId : void 0;
    raw = JSON.stringify({
      contents: {
        en: message
      },
      headings: {
        en: title
      },
      target_channel: "push",
      isAnyWeb: true,
      include_subscription_ids: [subId],
      app_id: NotificationManager.appId
    });
    requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: raw,
      redirect: "follow"
    };
    console.log(recipientKey);
    // Add activity to database
    newActivity = new Activity();
    newActivity.id = Manager.getUid();
    newActivity.recipientKey = recipientKey;
    newActivity.ownerKey = currentUser != null ? currentUser.key : void 0;
    newActivity.sharedByName = currentUser != null ? currentUser.name : void 0;
    newActivity.title = title;
    newActivity.text = message;
    newActivity.category = category;
    await DB.add(`${DB.tables.activities}/${recipientKey}`, newActivity);
    if (!window.location.href.includes("localhostsssss")) {
      return fetch("https://api.onesignal.com/notifications", requestOptions).then(function(response) {
        return response.text();
      }).then(function(result) {
        console.log(result);
        return console.log(`Sent to ${subId}`);
      }).catch(function(error) {
        return console.error(error);
      });
    }
  },
  sendToShareWith: async function(shareWithKeys, currentUser, title, message, category = '') {
    var i, key, len, results;
    if (Manager.isValid(shareWithKeys)) {
      results = [];
      for (i = 0, len = shareWithKeys.length; i < len; i++) {
        key = shareWithKeys[i];
        results.push((await NotificationManager.sendNotification(title, message, key, currentUser, category)));
      }
      return results;
    }
  },
  enableNotifications: function(subId) {
    var myHeaders, options, raw, url;
    myHeaders = new Headers();
    myHeaders.append("Accept", "application/json");
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Authorization", `Basic ${NotificationManager.apiKey}`);
    url = `https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}`;
    raw = JSON.stringify({
      "subscription": {
        "type": "Web Push",
        "enabled": true,
        "notification_types": 1
      }
    });
    options = {
      method: 'PATCH',
      headers: myHeaders,
      body: raw
    };
    return fetch(url, options).then(function(res) {
      return res.json();
    }).then(function(json) {
      return console.log(json);
    }).catch(function(err) {
      return console.error(err);
    });
  },
  disableNotifications: function(subId) {
    var myHeaders, options, raw, url;
    myHeaders = new Headers();
    myHeaders.append("Accept", "application/json");
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Authorization", `Basic ${NotificationManager.apiKey}`);
    url = `https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}`;
    raw = JSON.stringify({
      "subscription": {
        "type": "Web Push",
        "enabled": false,
        "notification_types": -31
      }
    });
    options = {
      method: 'PATCH',
      headers: myHeaders,
      body: raw
    };
    return fetch(url, options).then(function(res) {
      return res.json();
    }).then(function(json) {
      return console.log(json);
    }).catch(function(err) {
      return console.error(err);
    });
  }
};

//# sourceMappingURL=notificationManager.js.map
