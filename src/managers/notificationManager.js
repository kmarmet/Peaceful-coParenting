// Generated by CoffeeScript 2.7.0
var NotificationManager;

import DB from '../../src/database/DB';

import OneSignal from 'react-onesignal';

import Manager from "./manager.js";

import NotificationSubscriber from "../models/notificationSubscriber";

import DB_UserScoped from "../database/db_userScoped";

export default NotificationManager = {
  lineBreak: '\r\n',
  // Define message templates
  templates: {
    // Template for event tomorrow reminder
    eventIsTomorrowReminder: function(event) {
      return `${event.title} is tomorrow ${Manager.isValid(event.fromTime) ? '@ ' + event.fromTime : ''}`;
    },
    // Template for event in an hour reminder
    eventIsInAnHourReminder: function(event) {
      return `${event.title} is in 1 hour`;
    },
    // Template for event in half hour reminder
    eventIsInHalfHourReminder: function(event) {
      return `${event.title} is in 30 minutes`;
    },
    // Template for update reminder
    updateReminder: function() {
      return 'Visit New Updates in the menu to learn more';
    },
    // Template for swap request decision
    swapRequestApproval: function(request, recipientName) {
      return `Swap Request decision for ${request.startDate} has been APPROVED by ${recipientName}${NotificationManager.lineBreak}${NotificationManager.lineBreak}`;
    },
    swapRequestRejection: function(request, recipientName) {
      return `Swap Request for ${request.startDate} has been REJECTED.${NotificationManager.lineBreak}${NotificationManager.lineBreak} Reason: ${request.reason}. If you would still prefer to proceed with the request, you can communicate with ${recipientName} to come to an agreement on the request.`;
    },
    transferRequestApproval: function(request, recipientName) {
      return `Transfer Change Request decision for ${request.date} has been APPROVED by ${recipientName}${NotificationManager.lineBreak}${NotificationManager.lineBreak}`;
    },
    transferRequestRejection: function(request, recipientName) {
      return `Transfer Change Request for ${request.date} has been REJECTED.${NotificationManager.lineBreak}${NotificationManager.lineBreak} Reason: ${request.reason}. If you would still prefer to proceed with the request, you can communicate with ${recipientName} to come to an agreement on the request.`;
    }
  },
  apiKey: 'os_v2_app_wjb2emrqojh2re4vwfdvavgfgfpm3s3xxaduhlnuiah2weksujvxpesz4fnbclq7b2dch2k3ixixovlaroxcredbec4ghwac4qpcjbi',
  appId: 'b243a232-3072-4fa8-9395-b1475054c531',
  init: function() {
    window.OneSignalDeferred = window.OneSignalDeferred || [];
    return OneSignalDeferred.push(function() {
      return OneSignal.init({
        appId: NotificationManager.appId
      }).then(function() {
        return OneSignal.User.PushSubscription.addEventListener('change', NotificationManager.eventListener);
      });
    });
  },
  eventListener: function(event) {
    var ref, userSubscribed;
    userSubscribed = OneSignal.User.PushSubscription.optedIn;
    if (userSubscribed) {
      localStorage.setItem("subscriptionId", event != null ? (ref = event.current) != null ? ref.id : void 0 : void 0);
      return setTimeout(function() {
        return window.location.reload();
      }, 2000);
    }
  },
  getUserSubId: async function(currentUser) {
    var existingRecord;
    existingRecord = (await DB.find(DB.tables.notificationSubscribers, ['email', currentUser != null ? currentUser.email : void 0], true));
    return existingRecord != null ? existingRecord.subscriptionId : void 0;
  },
  addToDatabase: async function(currentUser, subId) {
    var existingRecord, newSubscriber;
    existingRecord = (await DB.find(DB.tables.notificationSubscribers, ['email', currentUser.email], true));
    if (subId && !Manager.isValid(existingRecord)) {
      newSubscriber = new NotificationSubscriber();
      newSubscriber.email = currentUser != null ? currentUser.email : void 0;
      newSubscriber.phone = currentUser != null ? currentUser.phone : void 0;
      newSubscriber.id = Manager.getUid();
      newSubscriber.subscriptionId = subId;
      //      await NotificationManager.assignExternalId(currentUser)
      await DB.add(`/${DB.tables.notificationSubscribers}`, newSubscriber);
      return (await NotificationManager.sendNotification('Welcome Aboard!', 'You are now subscribed to peaceful communications!', subId));
    }
  },
  sendNotification: async function(title, message, subId) {
    var currentUser, myHeaders, notificationsEnabled, raw, ref, requestOptions, subIdRecord;
    myHeaders = new Headers();
    myHeaders.append("Accept", "application/json");
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Authorization", `Basic ${NotificationManager.apiKey}`);
    subIdRecord = (await DB.find(DB.tables.notificationSubscribers, ["subscriptionId", subId], true));
    currentUser = (await DB.find(DB.tables.users, ["phone", subIdRecord.phone]));
    notificationsEnabled = currentUser != null ? (ref = currentUser.settings) != null ? ref.notificationsEnabled : void 0 : void 0;
    if (notificationsEnabled) {
      raw = JSON.stringify;
      ({
        contents: {
          en: message
        },
        headings: {
          en: title
        },
        target_channel: "push",
        isAnyWeb: true,
        include_subscription_ids: [subId],
        app_id: NotificationManager.appId
      });
      requestOptions = {
        method: "POST",
        headers: myHeaders,
        body: raw,
        redirect: "follow"
      };
      return fetch("https://api.onesignal.com/notifications", requestOptions).then(function(response) {
        return response.text();
      }).then(function(result) {
        console.log(result);
        return console.log(`Sent to ${subId}`);
      }).catch(function(error) {
        return console.error(error);
      });
    } else {
      return console.log("Notifications disabled for this user");
    }
  },
  disableNotifications: function(subId) {
    var myHeaders, options, url;
    myHeaders = new Headers();
    myHeaders.append("Accept", "application/json");
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Authorization", `Basic ${NotificationManager.apiKey}`);
    url = `https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}`;
    options = {
      method: 'DELETE',
      headers: myHeaders
    };
    return fetch(url, options).then(function(res) {
      return res.json();
    }).then(function(json) {
      return console.log(json);
    }).catch(function(err) {
      return console.error(err);
    });
  },
  sendToShareWith: async function(coparentPhones, currentUser, title, message) {
    var coparent, i, len, notificationsEnabled, phone, ref, results, subId;
    results = [];
    for (i = 0, len = coparentPhones.length; i < len; i++) {
      phone = coparentPhones[i];
      coparent = (await DB_UserScoped.getCoparentByPhone(phone, currentUser));
      notificationsEnabled = coparent != null ? (ref = coparent.settings) != null ? ref.notificationsEnabled : void 0 : void 0;
      if (notificationsEnabled) {
        subId = (await NotificationManager.getUserSubId(coparent));
        results.push((await NotificationManager.sendNotification(title, message, subId)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  assignExternalId: function(currentUser) {
    var myHeaders, raw, requestOptions, subId;
    myHeaders = new Headers();
    myHeaders.append("Authorization", `Basic ${NotificationManager.apiKey}`);
    myHeaders.append("Content-Type", "application/json");
    raw = JSON.stringify({
      identity: {
        external_id: currentUser.email
      },
      type: "Web Push"
    });
    requestOptions = {
      method: "PATCH",
      headers: myHeaders,
      body: raw,
      redirect: "follow"
    };
    subId = localStorage.getItem("subscriptionId");
    return fetch(`https://api.onesignal.com/apps/${NotificationManager.appId}/subscriptions/${subId}/user/identity`, requestOptions).then(function(response) {
      return response.text();
    }).then(function(result) {
      console.log("Assign External ID Result", result);
      return localStorage.removeItem('subscriptionId');
    }).catch(function(error) {
      return console.error(error);
    });
  }
};

//# sourceMappingURL=notificationManager.js.map
