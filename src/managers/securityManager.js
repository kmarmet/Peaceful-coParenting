// Generated by CoffeeScript 2.7.0
var SecurityManager,
  indexOf = [].indexOf

import {
  contains,
  formatFileName,
  formatNameFirstNameOnly,
  getFileExtension,
  getFirstWord,
  isAllUppercase,
  removeFileExtension,
  removeSpacesAndLowerCase,
  spaceBetweenWords,
  stringHasNumbers,
  toCamelCase,
  uniqueArray,
  uppercaseFirstLetterOfAllWords,
  wordCount,
} from '../globalFunctions'

import Manager from '@manager'

import DB from '../database/DB'

SecurityManager = {
  getCalendarEvents: async function (currentUser) {
    var allEvents, event, i, len, returnRecords, shareWith
    returnRecords = []
    allEvents = Manager.convertToArray(await DB.getTable(DB.tables.calendarEvents)).flat()
    if (Manager.isValid(allEvents, true)) {
      for (i = 0, len = allEvents.length; i < len; i++) {
        event = allEvents[i]
        shareWith = event.shareWith
        if (Manager.dateIsValid(event.startDate) && event.startDate.length > 0) {
          if (event.ownerPhone === currentUser.phone) {
            returnRecords.push(event)
          }
          if (Manager.isValid(shareWith, true) && shareWith.includes(currentUser.phone)) {
            returnRecords.push(event)
          }
        }
      }
    }
    return returnRecords
  },
  getExpenses: async function (currentUser) {
    var allExpenses, expense, i, len, returnRecords, shareWith
    returnRecords = []
    allExpenses = Manager.convertToArray(await DB.getTable(DB.tables.expenseTracker)).flat()
    if (Manager.isValid(allExpenses, true)) {
      for (i = 0, len = allExpenses.length; i < len; i++) {
        expense = allExpenses[i]
        shareWith = expense.shareWith
        if (expense.phone === currentUser.phone) {
          returnRecords.push(expense)
        }
        if (Manager.isValid(shareWith, true)) {
          if (shareWith.includes(currentUser.phone)) {
            returnRecords.push(expense)
          }
        }
      }
    }
    return returnRecords
  },
  getSwapRequests: async function (currentUser) {
    var allRequests, i, len, request, returnRecords, shareWith
    returnRecords = []
    allRequests = Manager.convertToArray(await DB.getTable(DB.tables.swapRequests)).flat()
    if (Manager.isValid(allRequests, true)) {
      for (i = 0, len = allRequests.length; i < len; i++) {
        request = allRequests[i]
        shareWith = request.shareWith
        if (request.phone === currentUser.phone) {
          returnRecords.push(request)
        }
        if (Manager.isValid(shareWith, true)) {
          if (shareWith.includes(currentUser.phone)) {
            returnRecords.push(request)
          }
        }
      }
    }
    return returnRecords
  },
  getTransferChangeRequests: async function (currentUser) {
    var allRequests, i, len, request, returnRecords, shareWith
    returnRecords = []
    allRequests = Manager.convertToArray(await DB.getTable(DB.tables.transferChangeRequests)).flat()
    if (Manager.isValid(allRequests, true)) {
      for (i = 0, len = allRequests.length; i < len; i++) {
        request = allRequests[i]
        shareWith = request.shareWith
        if (request.phone === currentUser.phone) {
          returnRecords.push(request)
        }
        if (Manager.isValid(shareWith, true)) {
          if (shareWith.includes(currentUser.phone)) {
            returnRecords.push(request)
          }
        }
      }
    }
    return returnRecords.flat()
  },
  getDocuments: async function (currentUser) {
    var allDocs, doc, i, len, returnRecords, shareWith
    returnRecords = []
    allDocs = Manager.convertToArray(await DB.getTable(DB.tables.documents)).flat()
    if (Manager.isValid(allDocs, true)) {
      for (i = 0, len = allDocs.length; i < len; i++) {
        doc = allDocs[i]
        shareWith = doc.shareWith
        if (doc.phone === currentUser.phone) {
          returnRecords.push(doc)
        }
        if (doc.phone === currentUser.phone) {
          returnRecords.push(doc)
        }
        if (Manager.isValid(shareWith, true)) {
          returnRecords.push(doc)
        }
      }
    }
    return returnRecords.flat()
  },
  getMemories: async function (currentUser) {
    var allMemories, i, len, memory, returnRecords, shareWith
    returnRecords = []
    allMemories = Manager.convertToArray(await DB.getTable(`${DB.tables.memories}`)).flat()
    if (Manager.isValid(allMemories, true)) {
      for (i = 0, len = allMemories.length; i < len; i++) {
        memory = allMemories[i]
        shareWith = memory.shareWith
        if (memory.ownerPhone === currentUser.phone) {
          returnRecords.push(memory)
        }
        if (Manager.isValid(shareWith, true)) {
          if (shareWith.includes(currentUser.phone)) {
            returnRecords.push(memory)
          }
        }
      }
    }
    return returnRecords.flat()
  },
  getTitleSuggestions: async function (currentUser) {
    var i, len, returnRecords, suggestion, suggestions
    returnRecords = []
    suggestions = Manager.convertToArray(await DB.getTable(DB.tables.suggestions)).flat()
    if (Manager.isValid(suggestions, true)) {
      for (i = 0, len = suggestions.length; i < len; i++) {
        suggestion = suggestions[i]
        if (suggestion.ownerPhone === currentUser.phone) {
          returnRecords.push(suggestion)
        }
      }
    }
    return returnRecords.flat()
  },
  getChats: async function (currentUser) {
    var allChats, chat, chats, i, len, members, ref, ref1, securedChats, visibilityMemberPhones
    chats = Manager.convertToArray(await DB.getTable(`${DB.tables.chats}`)).flat()
    securedChats = []
    // User does not have a chat with root access by phone
    if (Manager.isValid(chats, true)) {
      allChats = await DB.getTable('chats')
      ref = allChats.flat()
      for (i = 0, len = ref.length; i < len; i++) {
        chat = ref[i]
        if (Manager.isValid(chat.threadVisibilityMembers, true)) {
          visibilityMemberPhones = chat.threadVisibilityMembers.map(function (x) {
            return x.phone
          })
          if (visibilityMemberPhones.includes(currentUser.phone)) {
            members = chat.members.map(function (x) {
              return x.phone
            })
            if (((ref1 = currentUser.phone), indexOf.call(members, ref1) >= 0)) {
              securedChats.push(chat)
            }
          }
        }
      }
    }
    return securedChats.flat()
  },
  getCoparentChats: async function (currentUser) {
    var activeChats, allChats, allChatsFlattened, chat, i, len, members, ref
    allChats = await DB.getTable('chats')
    activeChats = []
    allChatsFlattened = allChats.flat()
    for (i = 0, len = allChatsFlattened.length; i < len; i++) {
      chat = allChatsFlattened[i]
      members = chat.members.map(function (x) {
        return x.phone
      })
      if (((ref = currentUser.phone), indexOf.call(members, ref) >= 0)) {
        activeChats.push(chat)
      }
    }
    return activeChats
  },
}

export default SecurityManager

//# sourceMappingURL=securityManager.js.map
