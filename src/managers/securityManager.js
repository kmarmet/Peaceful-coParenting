// Generated by CoffeeScript 2.7.0
var SecurityManager;

import {
  toCamelCase,
  getFirstWord,
  formatFileName,
  isAllUppercase,
  removeSpacesAndLowerCase,
  stringHasNumbers,
  wordCount,
  uppercaseFirstLetterOfAllWords,
  spaceBetweenWords,
  formatNameFirstNameOnly,
  removeFileExtension,
  contains,
  uniqueArray,
  getFileExtension
} from "../globalFunctions";

import Manager from '@manager';

import DB from "../database/DB";

SecurityManager = {
  getCalendarEvents: async function(currentUser) {
    var allEvents, event, i, len, returnRecords, shareWith;
    returnRecords = [];
    allEvents = Manager.convertToArray((await DB.getTable(DB.tables.calendarEvents))).flat();
    for (i = 0, len = allEvents.length; i < len; i++) {
      event = allEvents[i];
      shareWith = event.shareWith;
      if (Manager.isValid(shareWith, true)) {
        if (shareWith.includes(currentUser.phone) || event.phone === currentUser.phone) {
          returnRecords.push(event);
        }
      }
    }
    return returnRecords;
  },
  getExpenses: async function(currentUser) {
    var allExpenses, expense, i, len, returnRecords, shareWith;
    returnRecords = [];
    allExpenses = Manager.convertToArray((await DB.getTable(DB.tables.expenseTracker))).flat();
    for (i = 0, len = allExpenses.length; i < len; i++) {
      expense = allExpenses[i];
      shareWith = expense.shareWith;
      if (Manager.isValid(shareWith, true)) {
        if (shareWith.includes(currentUser.phone) || expense.phone === currentUser.phone) {
          returnRecords.push(expense);
        }
      }
    }
    return returnRecords;
  },
  getSwapRequests: async function(currentUser) {
    var allRequests, i, len, request, returnRecords, shareWith;
    returnRecords = [];
    allRequests = Manager.convertToArray((await DB.getTable(DB.tables.swapRequests))).flat();
    for (i = 0, len = allRequests.length; i < len; i++) {
      request = allRequests[i];
      shareWith = request.shareWith;
      if (Manager.isValid(shareWith, true)) {
        if (shareWith.includes(currentUser.phone) || request.phone === currentUser.phone) {
          returnRecords.push(request);
        }
      }
    }
    return returnRecords;
  }
};

export default SecurityManager;

//# sourceMappingURL=securityManager.js.map
