{
  "version": 3,
  "file": "calMapper.js",
  "sourceRoot": "\\",
  "sources": [
    "calMapper.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA;;AAAA,OAAO,aAAP,MAAA;;AACA,OAAO,WAAP,MAAA;;AAEA,cAAA,GACE;EAAA,aAAA,EAAe,QAAA,CAAC,SAAD,CAAA;AACjB,QAAA;IAAI,UAAA,GAAa;IACb,IAAG,SAAS,CAAC,OAAV,CAAkB,MAAlB,CAAA,GAA4B,CAAC,CAAhC;MACE,UAAA,GAAa,aAAa,CAAC,KAD7B;;IAEA,IAAG,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAA,GAA0B,CAAC,CAA9B;MACE,UAAA,GAAa,aAAa,CAAC,SAD7B;;IAEA,IAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAA,GAAyB,CAAC,CAA7B;MACE,UAAA,GAAa,aAAa,CAAC,YAD7B;;IAEA,IAAG,SAAS,CAAC,OAAV,CAAkB,OAAlB,CAAA,GAA6B,CAAC,CAAjC;MACE,UAAA,GAAa,aAAa,CAAC,YAD7B;;AAGA,WAAO;EAXM,CAAf;EAaA,gCAAA,EAAkC,QAAA,CAAC,SAAD,CAAA;AACpC,QAAA;IAAI,UAAA,GAAa;IACb,IAAG,SAAS,CAAC,OAAV,CAAkB,MAAlB,CAAA,GAA4B,CAAC,CAAhC;MACE,UAAA,GAAa,gBADf;;IAEA,IAAG,SAAS,CAAC,OAAV,CAAkB,UAAlB,CAAA,GAAgC,CAAC,CAApC;MACE,UAAA,GAAa,oBADf;;IAEA,IAAG,SAAS,CAAC,OAAV,CAAkB,aAAlB,CAAA,GAAmC,CAAC,CAAvC;MACE,UAAA,GAAa,mBADf;;IAEA,IAAG,SAAS,CAAC,OAAV,CAAkB,aAAlB,CAAA,GAAmC,CAAC,CAAvC;MACE,UAAA,GAAa,mBADf;;AAGA,WAAO;EAXyB,CAblC;EA0BA,uBAAA,EAAyB,QAAA,CAAC,gBAAD,CAAA;AAC3B,QAAA;IAAI,QAAA,GAAW;IACX,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAA,GAAmC,CAAC,CAAvC;MACE,QAAA,GAAW,gBADb;;IAEA,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,UAAzB,CAAA,GAAuC,CAAC,CAA3C;MACE,QAAA,GAAW,oBADb;;IAEA,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,aAAzB,CAAA,GAA0C,CAAC,CAA9C;MACE,QAAA,GAAW,mBADb;;IAEA,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,aAAzB,CAAA,GAA0C,CAAC,CAA9C;MACE,QAAA,GAAW,mBADb;;AAGA,WAAO;EAXgB,CA1BzB;EAuCA,eAAA,EAAiB,QAAA,CAAC,cAAD,EAAiB,aAAjB,EAAgC,gBAAhC,CAAA;AACnB,QAAA;IAAI,aAAA,GAAgB;IAChB,IAAG,cAAA,KAAkB,OAArB;MACE,aAAA,GAAgB,WAAW,CAAC,aAAZ,CAA0B,aAA1B,EAAyC,gBAAzC,EADlB;;IAEA,IAAG,cAAA,KAAkB,QAArB;MACE,aAAA,GAAgB,WAAW,CAAC,cAAZ,CAA2B,aAA3B,EAA0C,gBAA1C,EADlB;;IAEA,IAAG,cAAA,KAAkB,UAArB;MACE,aAAA,GAAgB,WAAW,CAAC,gBAAZ,CAA6B,aAA7B,EAA4C,gBAA5C,EADlB;;IAEA,IAAG,cAAA,KAAkB,SAArB;MACE,aAAA,GAAgB,WAAW,CAAC,eAAZ,CAA4B,aAA5B,EAA2C,gBAA3C,EADlB;;AAGA,WAAO;EAXQ;AAvCjB;;AAoDF,OAAA,QAAe",
  "sourcesContent": [
    "import ReminderTimes from 'constants/reminderTimes'\r\nimport DateManager from 'managers/dateManager'\r\n\r\nCalendarMapper =\r\n  reminderTimes: (timeframe) ->\r\n    _timeframe = null\r\n    if timeframe.indexOf('hour') > -1\r\n      _timeframe = ReminderTimes.hour\r\n    if timeframe.indexOf('30') > -1\r\n      _timeframe = ReminderTimes.halfHour\r\n    if timeframe.indexOf('5') > -1\r\n      _timeframe = ReminderTimes.fiveMinutes\r\n    if timeframe.indexOf('event') > -1\r\n      _timeframe = ReminderTimes.timeOfEvent\r\n\r\n    return _timeframe\r\n\r\n  readableReminderBeforeTimeframes: (timeframe) ->\r\n    _timeframe = null\r\n    if timeframe.indexOf('hour') > -1\r\n      _timeframe = '1 hour before'\r\n    if timeframe.indexOf('halfHour') > -1\r\n      _timeframe = '30 minutes before'\r\n    if timeframe.indexOf('fiveMinutes') > -1\r\n      _timeframe = '5 minutes before'\r\n    if timeframe.indexOf('timeOfEvent') > -1\r\n      _timeframe = 'At time of event'\r\n\r\n    return _timeframe\r\n\r\n  readableRepeatIntervals: (selectedInterval) ->\r\n    interval = null\r\n    if selectedInterval.indexOf('hour') > -1\r\n      interval = '1 hour before'\r\n    if selectedInterval.indexOf('halfHour') > -1\r\n      interval = '30 minutes before'\r\n    if selectedInterval.indexOf('fiveMinutes') > -1\r\n      interval = '5 minutes before'\r\n    if selectedInterval.indexOf('timeOfEvent') > -1\r\n      interval = 'At time of event'\r\n\r\n    return interval\r\n\r\n  repeatingEvents: (repeatInterval, eventFromDate, repeatingEndDate) ->\r\n    datesToRepeat = null\r\n    if repeatInterval is 'daily'\r\n      datesToRepeat = DateManager.getDailyDates(eventFromDate, repeatingEndDate)\r\n    if repeatInterval is 'weekly'\r\n      datesToRepeat = DateManager.getWeeklyDates(eventFromDate, repeatingEndDate)\r\n    if repeatInterval is 'biweekly'\r\n      datesToRepeat = DateManager.getBiweeklyDates(eventFromDate, repeatingEndDate)\r\n    if repeatInterval is 'monthly'\r\n      datesToRepeat = DateManager.getMonthlyDates(eventFromDate, repeatingEndDate)\r\n\r\n    return datesToRepeat\r\n\r\nexport default CalendarMapper\r\n\r\n"
  ]
}