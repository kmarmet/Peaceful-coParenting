import moment from "moment";
import React, { useContext, useEffect, useState } from "react";
import { Accordion, DatePicker, Dropdown, DateRangePicker } from "rsuite";
import Autocomplete from "react-google-autocomplete";
import scheduleTypes from "@constants/scheduleTypes";
import globalState from "../../context";
import DB from "@db";
import CalendarEvent from "@models/calendarEvent";
import Manager from "@manager";
import CheckboxGroup from "@shared/checkboxGroup";
import VisitationManager from "@managers/visitationManager";
import MyConfetti from "@shared/myConfetti";
import Confirm from "@shared/confirm";
import Note from "@shared/note";
import DB_UserScoped from "@userScoped";
import DateManager from "managers/dateManager";
import VisitationMapper from "mappers/visitationMapper";

export default function CoparentingSpace() {
  const { state, setState } = useContext(globalState);
  const { currentUser, currentScreenTitle, theme, setTheme } = state;
  const [scheduleType, setScheduleType] = useState("");
  const [defaultSelectedWeekends, setDefaultSelectedWeekends] = useState([]);
  const [fifthWeekendSelection, setFifthWeekendSelection] = useState("");
  const [shareWith, setShareWith] = useState([]);
  const [deleteMessage, setDeleteMessage] = useState("");
  const [firstFFPeriodStart, setFirstFFPeriodStart] = useState("");
  const [firstFFPeriodEnd, setFirstFFPeriodEnd] = useState("");
  const [secondFFPeriodStart, setSecondFFPeriodStart] = useState("");
  const [secondFFPeriodEnd, setSecondFFPeriodEnd] = useState("");
  const [thirdFFPeriodStart, setThirdFFPeriodStart] = useState("");
  const [thirdFFPeriodEnd, setThirdFFPeriodEnd] = useState("");
  const [showFFExample, setShowFFExample] = useState(false);
  const [holidayLabels, setHolidayLabels] = useState([]);
  const [holidaySelections, setHolidaySelections] = useState([]);
  const [ffAccordionExpanded, setFfAccordionExpanded] = useState(false);
  const [scheduleAccordionExpanded, setScheduleAccordionExpanded] = useState(false);

  const updatePreferredLocation = async (location, link) => {
    await DB_UserScoped.updateUserRecord(DB.tables.users, currentUser.phone, "transferLocationDirectionsLink", link);
    await DB_UserScoped.updateUserRecord(DB.tables.users, currentUser.phone, "preferredTransferLocation", location);
  };

  const deleteSchedule = async () => {
    const scheduleEvents = await VisitationManager.getSchedule(currentUser);
    await VisitationManager.deleteSchedule(scheduleEvents);
    setState({ ...state, alertType: "success", showAlert: true, alertMessage: "Schedule Deleted" });
    setDeleteMessage("");
  };

  const resetScreen = () => {
    setScheduleType("");
    setDefaultSelectedWeekends([]);
    setFifthWeekendSelection("");
    setShareWith([]);
    setDeleteMessage("");
    setFirstFFPeriodStart("");
    setFirstFFPeriodEnd("");
    setSecondFFPeriodStart("");
    setSecondFFPeriodEnd("");
    setThirdFFPeriodStart("");
    setThirdFFPeriodEnd("");
    setShowFFExample(false);
    setShareWith([]);
    Manager.toggleForModalOrNewForm("show");
    setState({ ...state, showMenuButton: true });
  };

  // Weekends
  const addWeekendsToCalendar = () => {
    if (!Manager.isValid(defaultSelectedWeekends, true) || !Manager.isValid(fifthWeekendSelection)) {
      setState({ ...state, showAlert: true, alertMessage: "Please choose default weekends and a five-month weekend" });
      return false;
    }

    if (!Manager.isValid(shareWith, true)) {
      setState({ ...state, showAlert: true, alertMessage: "Please set who can see the schedule" });
      return false;
    }
    // Set end date to the end of the year
    const endDate = moment([moment().year()]).endOf("year").format("MM-DD-YYYY");
    let weekends = VisitationManager.getWeekends(
      scheduleTypes.variableWeekends,
      endDate,
      defaultSelectedWeekends,
      fifthWeekendSelection
    );

    // Standard Dates
    let events = [];
    weekends.flat().forEach((date) => {
      const dateObject = new CalendarEvent();
      // Required
      dateObject.title = `${currentUser.name.formatNameFirstNameOnly()}'s Scheduled Visitation`;
      dateObject.fromDate = moment(date).format("MM/DD/yyyy");
      // Not Required
      dateObject.phone = currentUser.phone;
      dateObject.createdBy = currentUser.name;
      dateObject.fromVisitationSchedule = true;
      dateObject.id = Manager.getUid();
      dateObject.shareWith = Manager.getUniqueArray(shareWith).flat();

      if (events.length === 0) {
        events = [dateObject];
      } else {
        events = [...events, dateObject];
      }
    });

    // Holidays
    holidaySelections.forEach((holiday) => {
      const dateObject = new CalendarEvent();
      // Required
      dateObject.title = `${currentUser.name.formatNameFirstNameOnly()}'s Holiday Visitation`;
      dateObject.fromDate = moment(holiday.date).format("MM/DD/yyyy");
      // Not Required
      dateObject.phone = currentUser.phone;
      dateObject.createdBy = currentUser.name;
      dateObject.fromVisitationSchedule = true;
      dateObject.isHoliday = true;
      dateObject.id = Manager.getUid();
      dateObject.shareWith = Manager.getUniqueArray(shareWith).flat();
      events = [...events, dateObject];
    });

    // Upload to DB
    DB.addVisitationSchedule(events);
    MyConfetti.fire();
  };

  // 50/50
  const addFiftyFiftyToCal = () => {
    if (
      !Manager.isValid(firstFFPeriodEnd) ||
      !Manager.isValid(firstFFPeriodStart) ||
      !Manager.isValid(secondFFPeriodEnd) ||
      !Manager.isValid(secondFFPeriodStart)
    ) {
      setState({ ...state, showAlert: true, alertMessage: "Both schedule ranges are required" });
      return false;
    }

    const dates = {
      firstFFPeriodStart,
      firstFFPeriodEnd,
      secondFFPeriodStart,
      secondFFPeriodEnd,
      thirdFFPeriodStart,
      thirdFFPeriodEnd
    };
    const scheduleDates = VisitationManager.getFiftyFifty(dates);
    let events = [];
    scheduleDates.forEach((date, index) => {
      const formattedDate = moment(date).format("MM/DD/yyyy");
      const formattedFirstPeriodEnd = moment(firstFFPeriodEnd).format("MM/DD/yyyy");
      let end;
      let endDate;
      console.log(formattedDate, formattedFirstPeriodEnd);
      if (formattedDate == formattedFirstPeriodEnd) {
        endDate = formattedDate;
        end = " - END";
      }
      const dateObject = new CalendarEvent();
      // Required
      dateObject.title = `${currentUser.name.formatNameFirstNameOnly()}'s Scheduled Visitation${end}`;
      dateObject.fromDate = moment(date).format("MM/DD/yyyy");
      // Not Required
      dateObject.phone = currentUser.phone;
      dateObject.createdBy = currentUser.name;
      dateObject.fromVisitationSchedule = true;
      dateObject.shareWith = shareWith;
      dateObject.id = Manager.getUid();
      dateObject.shareWith = Manager.getUniqueArray(shareWith).flat();
      dateObject.createdBy;

      if (end !== undefined && end.length > 0) {
        let ms = Date.parse(date);
        if (ms !== NaN) {
          let momentDate = DateManager.msToDate(ms);
          momentDate = moment(momentDate).format("MM/DD/yyyy");
          dateObject.toDate = momentDate;
          console.log(dateObject);
        }
      }

      if (events.length === 0) {
        events = [dateObject];
      } else {
        events = [...events, dateObject];
      }
    });

    // Holidays
    holidaySelections.forEach((holiday) => {
      const dateObject = new CalendarEvent();
      // Required
      dateObject.title = `${currentUser.name.formatNameFirstNameOnly()}'s Holiday Visitation`;
      dateObject.fromDate = moment(holiday.date).format("MM/DD/yyyy");
      // Not Required
      dateObject.phone = currentUser.phone;
      dateObject.createdBy = currentUser.name;
      dateObject.fromVisitationSchedule = true;
      dateObject.isHoliday = true;
      dateObject.id = Manager.getUid();
      dateObject.shareWith = Manager.getUniqueArray(shareWith).flat();
      events = [...events, dateObject];
    });

    //console.log(events);

    // Upload to DB
    //DB.addVisitationSchedule(events);
    MyConfetti.fire();
  };

  const handleWeekendSelection = (e) => {
    Manager.handleCheckboxSelection(
      e,
      (e) => {},
      (e) => {
        if (defaultSelectedWeekends.length > 0) {
          setDefaultSelectedWeekends((defaultSelectedWeekends) => [...defaultSelectedWeekends, e]);
        } else {
          setDefaultSelectedWeekends([e]);
        }
      },
      true
    );
  };

  const handleFifthWeekendSelection = (e) => {
    Manager.handleCheckboxSelection(
      e,
      (e) => {
        console.log(e);
      },
      (e) => {
        setFifthWeekendSelection(e);
      },
      false
    );
  };

  const handleShareWithSelection = async (e) => {
    await Manager.handleShareWithSelection(e, currentUser, shareWith).then((updated) => {
      setShareWith(updated);
    });
  };

  const handleHolidaySelection = async (e) => {
    Manager.handleCheckboxSelection(
      e,
      (e) => {
        let filtered = holidaySelections.filter((x) => x !== e);
        setHolidaySelections(filtered);
      },
      (e) => {
        let formattedName = holidayLabels.filter((x) => x.name === e)[0];
        setHolidaySelections([...holidaySelections, formattedName]);
      },
      true
    );
  };

  const handleScheduleTypeSelection = (e) => {
    Manager.handleCheckboxSelection(
      e,
      (e) => {},
      (e) => {
        setScheduleType(VisitationMapper.formattedScheduleTypes(e));
        setScheduleAccordionExpanded(false);
        setState({ ...state, showMenuButton: false });
      }
    );
  };

  const getVisitationHolidays = async () => {
    const hols = [];
    await DateManager.getVisitationHolidays().then((holiday) => {
      hols.push(holiday);
    });
    return hols;
  };

  useEffect(() => {
    getVisitationHolidays().then((holidays) => {
      setHolidayLabels(holidays[0]);
    });
    Manager.toggleForModalOrNewForm("show");
    Manager.centerDatepicker();
  }, []);

  return (
    <>
      {/* CONFIRM ALERT */}
      <Confirm
        message={deleteMessage}
        subtitle={"Are you sure you would like to delete your visitation schedule?"}
        onReject={() => setDeleteMessage("")}
        onCancel={() => setDeleteMessage("")}
        onAccept={deleteSchedule}
      />
      <p className="screen-title lobster-regular">Coparenting Space</p>
      <div id="coparenting-setup-container" className="page-container form ">
        {/* SECTIONS */}
        <div className="sections">
          {/* VISITATION SCHEDULE */}
          <Accordion>
            <Accordion.Panel header="Visitation">
              <Note
                elClass={"mt-10"}
                message={
                  "When you choose a visitation schedule, it will be visible in the calendar for you and chosen coparents to view"
                }
              />

              {/* SCHEDULE SELECTION DROPDOWN */}
              <div className="section visitation-schedule mt-15 mb-15">
                {/* SCHEDULE SELECTION */}
                <Accordion>
                  <label
                    className="accordion-label"
                    onClick={() => setScheduleAccordionExpanded(!scheduleAccordionExpanded)}>
                    Choose Visitation Schedule
                    {scheduleAccordionExpanded ? (
                      <span className="material-icons">expand_less</span>
                    ) : (
                      <span className="material-icons">expand_more</span>
                    )}
                  </label>
                  <Accordion.Panel expanded={scheduleAccordionExpanded}>
                    <CheckboxGroup
                      elClass="mt-10"
                      onCheck={handleScheduleTypeSelection}
                      skipNameFormatting={true}
                      labels={["50/50", "Specific Weekends", "Every Weekend", "Every other Weekend"]}
                    />
                  </Accordion.Panel>
                </Accordion>
              </div>

              {scheduleType.length === 0 && (
                <button
                  onClick={() => {
                    setDeleteMessage("Deleting Existing Visitation Schedule");
                  }}
                  className="default red center">
                  Delete Existing Schedule
                </button>
              )}

              {/* 50/50 SCHEDULE */}
              {scheduleType === scheduleTypes.fiftyFifty && (
                <>
                  <p className="mb-10">
                    An arrangement where both you and your coparent have equal time with your children.
                  </p>
                  <p className="mb-10">
                    For the start of the next visitation period (and next period ONLY) you have your children, enter the
                    date ranges for both the first half of the 50/50 and the second half of the 50/50.
                  </p>
                  <p className="mb-5">
                    Use the <i>third period</i> date selector if it is necessary for your schedule
                  </p>
                  <span className="material-icons help-icon" onClick={() => setShowFFExample(!showFFExample)}>
                    help
                  </span>

                  <Note
                    elClass={showFFExample ? "mb-10 ff-note active" : "mb-10 ff-note"}
                    message={`For example: If you have your children (in August) Wednesday-Friday and then Monday-Wednesday on the next week:<br/><br/>You would
                  choose: 8/14-8/16 for the first period and 8/19-8/21 for the second period.`}
                  />
                  {/* 50/50 DATE PICKERS */}
                  <DateRangePicker
                    placeholder="First period*"
                    showOneCalendar
                    showHeader={false}
                    editable={false}
                    placement="auto"
                    character=" to "
                    className="mb-15 event-date"
                    format={"MM/dd/yyyy"}
                    onChange={(e) => {
                      let formattedDates = [];
                      if (e && e.length > 0) {
                        e.forEach((date) => {
                          formattedDates.push(new Date(moment(date).format("MM/DD/YYYY")));
                        });
                        setFirstFFPeriodStart(formattedDates[0]);
                        setFirstFFPeriodEnd(formattedDates[1]);
                      }
                    }}
                  />
                  <DateRangePicker
                    placeholder="Second period*"
                    showOneCalendar
                    showHeader={false}
                    editable={false}
                    className="mb-15 event-date"
                    placement="auto"
                    character=" to "
                    format={"MM/dd/yyyy"}
                    onChange={(e) => {
                      let formattedDates = [];
                      if (e && e.length > 0) {
                        e.forEach((date) => {
                          formattedDates.push(new Date(moment(date).format("MM/DD/YYYY")));
                        });
                        setSecondFFPeriodStart(formattedDates[0]);
                        setSecondFFPeriodEnd(formattedDates[1]);
                      }
                    }}
                  />
                  <DateRangePicker
                    placeholder="Third period"
                    showOneCalendar
                    showHeader={false}
                    editable={false}
                    className="event-date mb-15"
                    placement="auto"
                    character=" to "
                    format={"MM/dd/yyyy"}
                    onChange={(e) => {
                      let formattedDates = [];
                      if (e && e.length > 0) {
                        e.forEach((date) => {
                          formattedDates.push(new Date(moment(date).format("MM/DD/YYYY")));
                        });
                        setThirdFFPeriodStart(formattedDates[0]);
                        setThirdFFPeriodEnd(formattedDates[1]);
                      }
                    }}
                  />

                  {/* HOLIDAY SELECTION */}
                  <Accordion>
                    <label className="accordion-label" onClick={() => setFfAccordionExpanded(!ffAccordionExpanded)}>
                      Select Holidays <b>You</b> Have the Child(ren){" "}
                      {ffAccordionExpanded ? (
                        <span className="material-icons">expand_less</span>
                      ) : (
                        <span className="material-icons">expand_more</span>
                      )}
                    </label>
                    <Accordion.Panel expanded={ffAccordionExpanded}>
                      <CheckboxGroup
                        elClass="mt-10"
                        onCheck={handleHolidaySelection}
                        skipNameFormatting={true}
                        labels={holidayLabels.map((x) => x.name)}
                      />
                    </Accordion.Panel>
                  </Accordion>
                  <div className="share-with-container mt-15">
                    <label>
                      <span className="material-icons-round warning mr-10">visibility</span> Who is allowed to see it?
                      <span className="asterisk">*</span>
                    </label>
                    <CheckboxGroup
                      dataPhone={currentUser.coparents.map((x) => x.phone)}
                      labels={currentUser.coparents.map((x) => x.name)}
                      onCheck={handleShareWithSelection}
                    />
                  </div>

                  <div className="button-group mt-15 bottom">
                    <button className=" button default  bottom w-third" onClick={resetScreen}>
                      Cancel
                    </button>
                    <button
                      className="delete button w-third bottom"
                      onClick={() => {
                        setDeleteMessage("deleting schedule");
                      }}>
                      Delete
                    </button>
                    <button className="button bottom submit  w-third" onClick={addFiftyFiftyToCal}>
                      Add to Cal <span className="material-icons"></span>
                    </button>
                  </div>
                </>
              )}

              {/* WEEKENDS SCHEDULE */}
              {scheduleType === scheduleTypes.variableWeekends && (
                <>
                  <div className="form mb-20">
                    <label>Which weekends will YOU have the child(ren)?</label>
                    <CheckboxGroup
                      elClass={"mb-15"}
                      onCheck={handleWeekendSelection}
                      labels={["1st Weekend", "2nd Weekend", "3rd Weekend", "4th Weekend"]}
                    />
                    <label>
                      If it is a month with 5 weekends, which additional weekend will YOU have the child(ren)?
                    </label>
                    <CheckboxGroup
                      onCheck={handleFifthWeekendSelection}
                      labels={["1st Weekend", "2nd Weekend", "3rd Weekend", "4th Weekend", "5th Weekend"]}
                    />
                  </div>
                  {/* HOLIDAY SELECTION */}
                  <label>Select the holidays YOU have the child(ren) this year</label>
                  <CheckboxGroup
                    onCheck={handleHolidaySelection}
                    skipNameFormatting={true}
                    labels={holidayLabels.map((x) => x.name)}
                  />

                  <div className="share-with-container">
                    <label>
                      <span className="material-icons-round warning mr-10">visibility</span> Who is allowed to see it?
                      <span className="asterisk">*</span>
                    </label>
                    <CheckboxGroup
                      dataPhone={currentUser.coparents.map((x) => x.phone)}
                      labels={currentUser.coparents.map((x) => x.name)}
                      onCheck={handleShareWithSelection}
                    />
                  </div>
                  <div className="button-group bottom">
                    <button className="bottom button default w-third" onClick={resetScreen}>
                      Cancel
                    </button>
                    <button className="button bottom submit  w-third" onClick={addWeekendsToCalendar}>
                      Add to Cal <span className="material-icons"></span>
                    </button>
                    <button
                      className=" button bottom cancel w-third"
                      onClick={() => {
                        setDeleteMessage("deleting schedule");
                      }}>
                      Delete
                    </button>


                  </div>
                  <label>Preferred Transfer Location (for primary/biological coparent)</label>
                  <Autocomplete
                    placeholder="Enter location..."
                    apiKey={process.env.REACT_APP_AUTOCOMPLETE_ADDRESS_API_KEY}
                    options={{
                      types: ["geocode", "establishment"],
                      componentRestrictions: { country: "usa" }
                    }}
                    className="mb-15"
                    onPlaceSelected={(place) => {
                      updatePreferredLocation(
                        place.formatted_address,
                        `https://www.google.com/maps?daddr=7${encodeURIComponent(place.formatted_address)}`
                      );
                    }}
                  />
                </>
              )}
            </Accordion.Panel>
          </Accordion>
        </div>
      </div>
    </>
  );
}
